<!DOCTYPE html>
<html lang="en">

<head>
    <title>观景台建筑结构展示</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <style>
    body {
        color: #000;
        font-family: Monospace;
        font-size: 30px;
        text-align: center;
        font-weight: bold;
        background-color: #fff;
        margin: 0px;
        overflow: hidden;
    }
    
    #info {
        color: #000;
        position: absolute;
        top: 10px;
        width: 100%;
        padding: 5px;
    }
    </style>
</head>

<body>
    <script id="vertex-shader" type="x-shader/x-vertex">
        uniform float time; void main() { vec3 posChanged = position; posChanged.x = posChanged.x*(abs(sin(time*1.0))); posChanged.y = posChanged.y*(abs(cos(time*1.0))); posChanged.z = posChanged.z*(abs(sin(time*1.0))); //gl_Position = projectionMatrix * modelViewMatrix * vec4(position*(abs(sin(time)/2.0)+0.5),1.0); gl_Position = projectionMatrix * modelViewMatrix * vec4(posChanged,1.0); }
    </script>
    <div id="container"></div>
    <div id="info">
        观景台建筑结构展示-BY 周青
    </div>
    <div id="Stats-output"></div>
    <script src="js/build/three.js"></script>
    <script src="js/controls/OrbitControls.js"></script>
    <script src='js/libs/dat.gui.min.js'></script>
    <script src='js/libs/tween.min.js'></script>
    <script type="text/javascript" src='js/loaders/OBJLoader.js'></script>
    <script type="text/javascript" src='js/loaders/MTLLoader.js'></script>
    <script src="js/libs/stats.min.js"></script>
    <script>
        var camera, controls, scene, renderer, Controller;
        var object1, object2, object3, object4, object5;
        init();
        render();
        //初始化
        function init() {
            //scene 添加场景组件
            scene = new THREE.Scene();
            renderer = new THREE.WebGLRenderer();
            renderer.setClearColor(0xf0f0f0);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);

            var container = document.getElementById('container');
            container.appendChild(renderer.domElement);

            // 添加相机组件
            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.set(0, 40, 40);
            camera.lookAt(0, 0, 0);
            //添加控制器组件
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.enablePan = false;
            // world
            //添加岩石模型及材质
            //01
            // var onProgress = function ( xhr ) {
            //if ( xhr.lengthComputable ) {
            // var percentComplete = xhr.loaded / xhr.total * 100;
            // console.log( Math.round(percentComplete, 2) + '% downloaded' );
            // }
            // };

            // var onError = function ( xhr ) { };
            // var mtlLoader = new THREE.MTLLoader();
            // mtlLoader.setPath( 'js/obj1/' );
            // mtlLoader.load( 'OBJ01.mtl', function( materials ) {
            // materials.preload();
            var objLoader1 = new THREE.OBJLoader();
            // objLoader.setMaterials( materials );
            objLoader1.setPath('js/obj1/');
            objLoader1.load('OBJ01.obj', function(object) {
                globalObject = object;
                object1 = object;
                scene.add(object);

            });
            // });
            //02
            //var onProgress = function ( xhr ) {
            //if ( xhr.lengthComputable ) {
            //var percentComplete = xhr.loaded / xhr.total * 100;
            // console.log( Math.round(percentComplete, 2) + '% downloaded' );
            // }
            // };

            // var onError = function ( xhr ) { };
            var mtlLoader = new THREE.MTLLoader();
            //mtlLoader.setPath( 'js/obj1/' );
            // mtlLoader.load( 'OBJ02.mtl', function( materials ) {
            // materials.preload();
            var objLoader2 = new THREE.OBJLoader();
            // objLoader.setMaterials( materials );
            objLoader2.setPath('js/obj1/');
            objLoader2.load('OBJ02.obj', function(object) {
                globalObject = object;
                object2 = object;
                scene.add(object);

            });
            //});
            //03
            // var onProgress = function ( xhr ) {
            // if ( xhr.lengthComputable ) {
            // var percentComplete = xhr.loaded / xhr.total * 100;
            // console.log( Math.round(percentComplete, 2) + '% downloaded' );
            // }
            //};
            // var onError = function ( xhr ) { };
            // var mtlLoader = new THREE.MTLLoader();
            // mtlLoader.setPath( 'js/obj1/' );
            //mtlLoader.load( 'OBJ03.mtl', function( materials ) {
            // materials.preload();
            var objLoader3 = new THREE.OBJLoader();
            // objLoader.setMaterials( materials );
            objLoader3.setPath('js/obj1/');
            objLoader3.load('OBJ03.obj', function(object) {
                globalObject = object;
                object3 = object;
                scene.add(object);

            });
            // });
            //04
            //var onProgress = function ( xhr ) {
            // if ( xhr.lengthComputable ) {
            // var percentComplete = xhr.loaded / xhr.total * 100;
            // console.log( Math.round(percentComplete, 2) + '% downloaded' );
            //  }
            // }
            // var onError = function ( xhr ) { };
            //  var mtlLoader = new THREE.MTLLoader();
            //mtlLoader.setPath( 'js/obj1/' );
            // mtlLoader.load( 'OBJ04.mtl', function( materials ) {
            // materials.preload();
            var objLoader4 = new THREE.OBJLoader();
            // objLoader.setMaterials( materials );
            objLoader4.setPath('js/obj1/');
            objLoader4.load('OBJ04.obj', function(object) {
                globalObject = object;
                object4 = object;
                scene.add(object);
            });
            // });
            //05
            //var onProgress = function ( xhr ) {
            //  if ( xhr.lengthComputable ) {
            //  var percentComplete = xhr.loaded / xhr.total * 100;
            // console.log( Math.round(percentComplete, 2) + '% downloaded' );
            //  }
            // };
            // var onError = function ( xhr ) { };
            // var mtlLoader = new THREE.MTLLoader();
            // mtlLoader.setPath( 'js/obj1/' );
            //mtlLoader.load( 'OBJ05.mtl', function( materials ) {
            // materials.preload();
            var objLoader5 = new THREE.OBJLoader();
            // objLoader.setMaterials( materials );
            objLoader5.setPath('js/obj1/');
            objLoader5.load('OBJ05.obj', function(object) {
                globalObject = object;
                object5 = object;
                scene.add(object);

            });
            // });
            // lights 添加灯光组件
            var light1 = new THREE.DirectionalLight(0xffffff);
            light1.position.set(1, 5, -2);
            light1.intensity = 2;
            scene.add(light1);
            var light2 = new THREE.DirectionalLight(0xffffff);
            light2.position.set(1, 5, 10);
            light2.intensity = 0.5;
            scene.add(light2);
            var light = new THREE.AmbientLight(0x222222);
            scene.add(light);
            //添加跟随浏览器大小自适应场景组件
            window.addEventListener('resize', onWindowResize, false);
            // GUI添加GUI组件
            setupGui();
        }
        //跟随浏览器大小自适应场景程序
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        //渲染器程序
        function render() {
            TWEEN.update();
            renderer.render(scene, camera);
            requestAnimationFrame(render);
        }
        //GUI程序
        function setupGui() {
            Controller = new function() {
                this.岩石 = true;
                this.建筑结构 = true;
                this.水池结构 = true;
                this.水流瀑布 = true;
                this.观景台面层 = true;
                this.分解 = function() {
                    var tweenobject2 = new TWEEN.Tween(object2.position)
                        .to({
                            y: 5
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject2.start();
                    var tweenobject3 = new TWEEN.Tween(object3.position)
                        .to({
                            y: 15
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject3.start();
                    var tweenobject4 = new TWEEN.Tween(object4.position)
                        .to({
                            y: 10
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject4.start();

                    var tweenobject5 = new TWEEN.Tween(object5.position)
                        .to({
                            y: 20
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject5.start();

                };

                this.合并 = function() {
                    var tweenobject2back = new TWEEN.Tween(object2.position)
                        .to({
                            y: 0
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject2back.start();
                    var tweenobject3back = new TWEEN.Tween(object3.position)
                        .to({
                            y: 0
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject3back.start();
                    var tweenobject4back = new TWEEN.Tween(object4.position)
                        .to({
                            y: 0
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject4back.start();
                    var tweenobject5back = new TWEEN.Tween(object5.position)
                        .to({
                            y: 0
                        }, 2000).easing(TWEEN.Easing.Sinusoidal.InOut);
                    tweenobject5back.start();
                };
            };
            var h;
            var gui = new dat.GUI();
            //material (attributes)
            h = gui.addFolder("图层开关");
            h.add(Controller, "岩石").onChange(function(e) {
                object1.visible = e;
            });
            h.add(Controller, "建筑结构").onChange(function(e) {
                object2.visible = e;
            });

            h.add(Controller, "水流瀑布").onChange(function(e) {
                object3.visible = e;
            });

            h.add(Controller, "水池结构").onChange(function(e) {
                object4.visible = e;
            });

            h.add(Controller, "观景台面层").onChange(function(e) {
                object5.visible = e;
            });
            h = gui.addFolder("分解&合并");
            h.add(Controller, "分解");
            h.add(Controller, "合并");
        }
    </script>
</body>

</html>